import { Component, Input } from '@angular/core';
import { Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { AppConstants } from '../@core/constants/app-constants';
import { RBACINFO } from '../@core/urls/users-url.config';
import * as i0 from "@angular/core";
import * as i1 from "../@core/service/user-org.service";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/alert.service";
import * as i4 from "../@core/service/data-store.service";
import * as i5 from "../@shared/alert/alert.component";
import * as i6 from "primeng/card";
import * as i7 from "primeng/dropdown";
import * as i8 from "primeng/accordion";
import * as i9 from "primeng/multiselect";
import * as i10 from "primeng/checkbox";
import * as i11 from "../@core/directives/permission.directive";
import * as i12 from "primeng/inputtext";
import * as i13 from "@angular/common";
import * as i14 from "primeng/api";
import * as i15 from "primeng/tooltip";
export class UsersComponent {
    constructor(userService, fb, alertService, _storeservice) {
        this.userService = userService;
        this.fb = fb;
        this.alertService = alertService;
        this._storeservice = _storeservice;
        this.RBACORG = new RBACINFO();
        this.userList = [];
        this.providerList = [];
        this.filteredUserList = [];
        this.selectedRoles = [];
        this.selectedTeams = [];
        this.userSearch$ = new Subject();
        this.currentDate = new Date();
        this.rolePolicyGroups = [];
        this.userPolicyGroups = [];
        this.validationErrors = {};
        this.formSubmit = false;
        this.providerAccount = false;
        this.checked = true;
        this.sendCredentials = true;
        this.imageInformation = '';
        this.initializeForm();
    }
    ngOnInit() {
        this._storeservice.currentStore.subscribe((res) => {
            if (res) {
                this.inputValidationMethod = res['INPUTVALIDATIONMETHOD'];
                this.httpService = res['HTTPSERVICE'];
            }
        });
        if (this.RBACORG['orgID']) {
            this.orgId = parseInt(this.RBACORG['orgID']);
            if (this.orgId) {
                this.getUserList();
                this.getRolesList();
                this.getPolicyGroupList();
            }
        }
    }
    initializeForm() {
        this.userForm = this.fb.group({
            firstname: ['', Validators.required],
            middlename: [''],
            lastname: ['', Validators.required],
            username: [''],
            // dob: [''],
            email: ['', [Validators.required, Validators.pattern(AppConstants.regexEmail)]],
            userroles: ['', Validators.required],
            userteams: [''],
            userpolicygroups: [''],
            organizationid: [''],
            emailtocurrentuser: false,
            isenabled: [true],
            providerId: [''],
            providerAccount: false,
            thumbnail: [''],
            islocked: [false]
        });
    }
    get formValidate() {
        return this.userForm.controls;
    }
    onInput(event, fieldtype, label, required) {
        const error = this.inputValidationMethod(event, fieldtype, label, required);
        if (error && typeof error === 'string') {
            this.validationErrors[label] = error;
        }
        else {
            delete this.validationErrors[label];
        }
    }
    getUserList(_key) {
        this.userService.getAllUserOrgList(this.orgId).subscribe((res) => {
            this.filteredUserList = [];
            this.userList = res.data;
            this.filteredUserList = this.userList;
        }, (_error) => this.alertService.error(AppConstants.errorMessage));
    }
    getRolesList() {
        this.userService.getAllUserRole(this.orgId).subscribe((res) => {
            this.userRoles = res['data'];
        }, (_error) => this.alertService.error(AppConstants.errorMessage));
    }
    clearSearch(event) {
        const inputElement = document.querySelector('.form-control');
        if (inputElement) {
            inputElement.value = '';
            this.filteredUserList = this.userList;
        }
    }
    getPolicyGroupList(_managementGroupId) {
        this.userService.getOrgPolicyGroupList(this.orgId).subscribe((res) => {
            this.policyGroupList = res['data'].sort((a, b) => a.name.localeCompare(b.name));
        }, (err) => console.log(err));
    }
    addUser() {
        const userData = this.userForm.getRawValue();
        delete userData.thumbnail;
        this.formSubmit = true;
        if (this.userForm.valid) {
            const rolePolicyGroupsIds = this.rolePolicyGroups.map(item => item.id);
            const filteredUserPolicyGroups = userData.userpolicygroups.filter(item => !rolePolicyGroupsIds.includes(item.id)).map(item => item.id);
            userData.organizationid = this.orgId;
            userData.id = 1;
            userData.userteams = userData.userteams || [];
            userData.userroles = [userData.userroles] || [];
            userData.userpolicygroups = filteredUserPolicyGroups;
            userData.emailtocurrentuser = userData.emailtocurrentuser || false;
            userData.username = userData.username || "";
            // userData.dob = new DatePipe('en-US').transform(userData.dob, 'YYYY-MM-dd');
            if (!this.userid) {
                this.userWithOutId(userData);
            }
            else {
                this.userWithID(userData);
            }
        }
    }
    userWithOutId(userData) {
        this.userService.saveUser(userData).subscribe((res) => {
            if (this.providerAccount && this.userForm.controls['providerId'].valid) {
                this.addProviderUser(userData.providerId, res['data']);
            }
            this.cancel(true);
            this.getUserList();
            this.alertService.success('User created successfully');
        }, (error) => {
            if (error.error.message) {
                this.alertService.error(error.error.message);
            }
            else {
                this.alertService.error('Failed to create user');
            }
        });
    }
    userWithID(userData) {
        if (this.uploadedFile) {
            userData.additionalinfo = {
                photo: this.imageData,
                thumbnail: this.imageData
            };
        }
        this.userService.updateUser(userData, this.userid).subscribe(() => {
            this.cancel(false);
            this.getUserList();
            this.userForm.controls['username'].disable();
            this.userForm.controls['email'].disable();
            this.alertService.success('User updated successfully');
        }, (err) => {
            if (err.error.message) {
                this.alertService.error(err.error.message);
            }
            else {
                this.alertService.error('Failed to create user');
            }
        });
    }
    mapUserToRole(userId, roleId) {
        const request = {
            userId: userId,
            roleId: roleId
        };
        this.userService.addUserRole(request).subscribe(() => console.log('User mapped to role Successfully'));
    }
    onClickAddUser() {
        this.userForm.controls['email'].enable();
        this.initializeForm();
        this.userForm.reset();
        this.formSubmit = false;
        this.sendCredentials = true;
        this.userid = '';
        this.userPolicyGroups = [];
        this.rolePolicyGroups = [];
        this.policyGroupList.map((p) => p.disabled = false);
        this.validationErrors = {};
        this.policyGroupsLength = 0;
    }
    cancel(changeFlag) {
        if (!this.userid) {
            this.userForm.reset();
            this.userForm.patchValue({
                isenabled: true,
                islocked: false
            });
            this.validationErrors = {};
            this.policyGroupsLength = 0;
        }
        this.providerAccount = false;
        this.formSubmit = false;
        this.userForm.controls['email'].enable();
        this.userForm.controls['username'].enable();
        if (changeFlag) {
            this.policyGroupList.map((p) => p.disabled = false);
        }
        this.userPolicyGroups = [];
        this.rolePolicyGroups = [];
        this.validationErrors = {};
    }
    searchUser(event) {
        const value = event.target.value.toLowerCase();
        this.filteredUserList = this.userList.filter(a => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.firstname) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    getUserInfo(user) {
        this.userPolicyGroups = [];
        this.validationErrors = {};
        this.formSubmit = false;
        this.sendCredentials = false;
        this.userid = user.id;
        this.userService.getAllUserList(this.userid).subscribe((res) => {
            var _a, _b, _c, _d, _e, _f;
            // this.imageInformation = res.data.additionalinfo?.thumbnail?.fileName?.split('/')[2] || '';
            this.userForm.patchValue({
                firstname: res.data.firstname,
                middlename: res.data.middlename,
                lastname: res.data.lastname,
                username: res.data.username,
                // dob: new Date(res.data.dob),
                email: res.data.email,
                organizationid: res.data.organizationid,
                thumbnail: ((_b = (_a = res.data.additionalinfo) === null || _a === void 0 ? void 0 : _a.thumbnail) === null || _b === void 0 ? void 0 : _b.url) || '',
                isenabled: (_c = res === null || res === void 0 ? void 0 : res.data) === null || _c === void 0 ? void 0 : _c.isenabled,
                islocked: (_d = res === null || res === void 0 ? void 0 : res.data) === null || _d === void 0 ? void 0 : _d.islocked,
                userroles: ((_f = (_e = res === null || res === void 0 ? void 0 : res.data) === null || _e === void 0 ? void 0 : _e.userroles[0]) === null || _f === void 0 ? void 0 : _f.id) || 0,
                userteams: res.data.userteams
                    ? res.data.userteams
                        .filter((item) => item)
                        .map((item) => {
                        return item['id'];
                    })
                    : [],
            });
            const list = this.policyGroupList;
            const UPGs = res.data.policygroups;
            UPGs.forEach(upg => {
                const existingPolicy = list.find(f => f.id === upg.id);
                if (existingPolicy)
                    this.userPolicyGroups.push(existingPolicy);
            });
            this.getRolePolicyGroups(this.userForm.value.userroles);
            this.userForm.controls['email'].disable();
            this.userForm.controls['username'].disable();
            // });
        });
    }
    removeValue(e, item) {
        e.stopPropagation();
        const selectedPGs = this.userForm.value.userpolicygroups;
        const filteredPgs = selectedPGs.filter((s) => s.id !== Number(item.id));
        this.userForm.patchValue({
            userpolicygroups: filteredPgs
        });
        this.policyGroupsLength = this.userForm.value.userpolicygroups.length;
    }
    getRolePolicyGroups(roleId) {
        this.policyGroupList.forEach(pg => pg['disabled'] = false);
        if (!roleId) {
            this.rolePolicyGroups = [];
            this.userForm.patchValue({
                userpolicygroups: [],
            });
            return;
        }
        this.userService.getRoleById(roleId).subscribe((res) => {
            if (res) {
                this.rolePolicyGroups = res['data'].policyGroups.sort((a, b) => a.policygroupname.localeCompare(b.policygroupname));
                const PGS = res['data'].policyGroups
                    .filter((item) => item)
                    .map((item) => {
                    return item;
                }) || [];
                const arr = [];
                const list = this.policyGroupList;
                PGS.map((pg) => {
                    const pgExists = list.filter((f) => f.id === pg.id);
                    if (pgExists.length) {
                        arr.push(pgExists[0]);
                    }
                });
                this.userForm.patchValue({
                    userpolicygroups: arr
                });
                const rolePGs = this.userForm.value.userpolicygroups.map((r) => r.id);
                const includedIndexes = [];
                const excludedIndexes = [];
                this.policyGroupList.forEach((pg, index) => {
                    if (rolePGs.includes(pg.id)) {
                        includedIndexes.push(index);
                    }
                    else {
                        excludedIndexes.push(index);
                    }
                });
                const reorderedList = includedIndexes.map(index => this.policyGroupList[index]).concat(excludedIndexes.map(index => this.policyGroupList[index]));
                console.log(reorderedList, "reorder");
                reorderedList.forEach(pg => {
                    if (rolePGs.includes(pg.id)) {
                        pg['disabled'] = true;
                    }
                });
                this.policyGroupList = reorderedList;
                this.userPolicyGroups = this.userPolicyGroups.sort((a, b) => a.policygroupname.localeCompare(b.policygroupname));
                const allPolicyGroups = this.userForm.value.userpolicygroups.concat(this.userPolicyGroups);
                this.userForm.patchValue({ userpolicygroups: allPolicyGroups });
                this.policyGroupsLength = this.userForm.value.userpolicygroups.length;
            }
        }, (_err) => this.alertService.error('Failed to Fetch Policy Groups'));
    }
    delete(event, id) {
        event.stopPropagation();
        this.deletedId = id;
        $('#Deleteuser').modal('show');
    }
    deleteUser() {
        this.userService.deleteUser(this.deletedId).subscribe(() => {
            this.cancel(true);
            this.alertService.success('User deleted successfully');
            $('#Deleteuser').modal('hide');
            this.getUserList();
        }, (_err) => this.alertService.error('Failed to delete User'));
    }
    cancelUser() {
        this.sendCredentials = true;
        this.formSubmit = false;
        this.userForm.reset();
        this.userForm.patchValue({
            isenabled: true,
            islocked: false
        });
        this.userForm.controls['email'].enable();
        this.userForm.controls['username'].enable();
        this.userid = '';
        this.policyGroupList.map((p) => p.disabled = false);
        this.userPolicyGroups = [];
        this.rolePolicyGroups = [];
        this.validationErrors = {};
        this.policyGroupsLength = 0;
    }
    activateUser() {
        const userData = this.userForm.getRawValue();
        const body = {
            email: userData.email,
            code: userData.otp
        };
        this.userService.activateUser(body).subscribe((_res) => {
            this.alertService.success('User Activated Successfully');
        }, (_err) => {
            this.alertService.error('User Activation Failed');
        });
    }
    selectProvider(selected) {
        this.providerAccount = selected;
    }
    addProviderUser(providerId, userid) {
        const data = {
            providerId: providerId,
            accountId: userid.toString()
        };
        this.userService.addProviderUser(data).subscribe(() => {
            console.log('Provider User added Successfully');
        }, (_err) => console.log('failed to add Provider user'));
    }
    handleFileInput(fileValue) {
        const target = fileValue.target;
        const file = target.files[0];
        this.uploadedFile = fileValue.target.files[0].name;
        this.imageData = {
            contentType: fileValue.target.files[0].type,
            fileName: `user-profileimage/${this.userid}/${this.uploadedFile.replaceAll(' ', '')}`
        };
        this.imageInformation = '';
        if (this.validateImage(fileValue.target.files)) {
            this.userService.uploadKey(this.imageData).subscribe((res) => {
                this.urlPath = res.data;
                const uploadAttachment = document.getElementById('file');
                const uploadAttachmentDetails = uploadAttachment.files[0];
                this.httpService.putUpload(this.urlPath, uploadAttachmentDetails, uploadAttachmentDetails.type).subscribe((_resp) => {
                    this.alertService.success('Profile Image uploaded successfully');
                    const reader = new FileReader();
                    reader.onload = () => {
                        this.userForm.patchValue({ thumbnail: reader.result });
                    };
                    reader.readAsDataURL(file);
                    this.attachType = fileValue.target.files[0].type;
                }, (error) => {
                    if (error.status == 0) {
                        this.alertService.error(AppConstants.errorMessage);
                        this.uploadedFile = '';
                        this.urlPath = '';
                    }
                });
            }, (_error) => {
                this.alertService.error(AppConstants.errorMessage);
            });
        }
    }
    onClickRemoveProfile() {
        $('#DeleteProfile').modal('show');
    }
    removeThumbnail() {
        this.cancel(true);
        this.alertService.success('Profile image deleted successfully.');
        $('#DeleteProfile').modal('hide');
        this.userForm.controls['thumbnail'].reset();
        this.imageInformation = '';
        this.imageData = '';
        this.uploadedFile = '';
    }
    validateImage(file) {
        const fileSize = Number(file[0].size) / 1024;
        const filetype = file[0].type.replace('image/', '');
        if (filetype === 'jpg' || filetype === 'jpeg' || filetype === 'png' || filetype === 'gif') {
            if (fileSize < 100) {
                return true;
            }
            else {
                this.imageInformation = 'Image size exceeds 100 KB';
                this.alertService.warn('File is bigger than 100 KB');
                return false;
            }
        }
        else {
            this.imageInformation = '';
            this.alertService.warn(`${filetype} format is not supported`);
            return false;
        }
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    selectPolicyGroup() {
        this.policyGroupsLength = this.userForm.value.userpolicygroups.length;
    }
    onPageNameInput(event, name) {
        const input = event.target;
        const startPosition = input.selectionStart;
        const endPosition = input.selectionEnd;
        const pagenameControl = this.userForm.get(name);
        if (pagenameControl.value) {
            const newValue = pagenameControl.value
                .split(' ')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
            pagenameControl.patchValue(newValue, { emitEvent: false });
            // Restore cursor position
            input.setSelectionRange(startPosition, endPosition);
        }
    }
}
UsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UsersComponent, deps: [{ token: i1.UserOrgService }, { token: i2.FormBuilder }, { token: i3.AlertService }, { token: i4.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
UsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: UsersComponent, selector: "users", inputs: { RBACORG: "RBACORG", PERMISSION: "PERMISSION" }, ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\" [formGroup]=\"userForm\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2 px-0 px-sm-0\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch d-flex align-items-center\">\r\n            <span class=\"p-input-icon-right w-100\">\r\n              <i class=\"pi pi-times-circle\" (click)=\"clearSearch($event)\"></i>\r\n              <input class=\"form-control\" fieldKey=\"SETTINGS_USR_SEARCH_BY_NAME\" placeholder=\"Search by User name\"\r\n                type=\"text\" (keyup)=\"searchUser($event)\" pInputText />\r\n            </span>\r\n            <button type=\"button\" class=\"btn btn-primary btncommon ml-2\" (click)=\"onClickAddUser()\">Add</button>\r\n            <!-- Modified line -->\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n          <div class=\"useracess\">\r\n            <div class=\"d-flex align-items-center justify-content-center h-100 w-100 ng-star-inserted\"\r\n              *ngIf=\"!filteredUserList.length\">\r\n              <p>No Record Found</p>\r\n            </div>\r\n            <ng-container *ngFor=\"let item of filteredUserList\">\r\n              <div class=\"row userdata align-items-center\" (click)=\"getUserInfo(item)\"\r\n                [ngClass]=\"{ active: item.id === userid }\">\r\n                <div class=\"col-12\">\r\n                  <img *ngIf=\"!item?.additionalinfo?.thumbnail?.url\" src=\"assets/images/user-empty.png\" alt=\"user\"\r\n                    class=\"userempty mr-2\" />\r\n                  <img *ngIf=\"item?.additionalinfo?.thumbnail?.url\" [src]=\"item?.additionalinfo?.thumbnail?.url\"\r\n                    alt=\"user\" class=\"userempty mr-2\" />\r\n\r\n                  <div class=\"overflow_txt userInforight\">\r\n                    <span class=\"nameuser\">{{ item.firstname + ' ' + item.lastname }}</span>\r\n                    <br />\r\n                    <span class=\"emailuser\">{{ item.email }}</span> <br />\r\n                  </div>\r\n\r\n                  <div class=\"lock-icon\">\r\n                    <span class=\"right-icons\" *ngIf=\"item?.islocked\">\r\n                      <em class=\"fa fa-lock mr-2\" aria-hidden=\"true\" (click)=\"stopPropagation($event)\"></em>\r\n                    </span>\r\n                    <span class=\"right-icons\">\r\n                      <em class=\"fa fa-trash\" (click)=\"delete($event, item.id)\" aria-hidden=\"true\"\r\n                        *showField=\"'SETTINGS_USR_DELETE_USER'\"></em>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-lg-8 col-md-6 col-12 user-right setting-tab mt-2\">\r\n      <p-card class=\"rbac-card h-100\" [style]=\"{ width: '100%' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Personal Details</span>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label for=\"fname\" class=\"referral-form-labels\">First Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"fname\" type=\"text\" placeholder=\"Enter First Name\" formControlName=\"firstname\"\r\n              fieldKey=\"SETTINGS_USR_FIRST_NAME\" aria-describedby=\"fname\" pInputText\r\n              (keyup)=\"onPageNameInput($event, 'firstname')\"\r\n              (input)=\"onInput($event, 'username', 'First Name', true)\"/>\r\n              <div *ngIf=\"validationErrors['First Name']\" class=\"p-error block mt-1\">{{validationErrors['First Name']}}</div>\r\n            <div *ngIf=\"!validationErrors['First Name'] && formValidate['firstname'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['firstname'].invalid\" class=\"p-error block mt-1\">First Name is required </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label for=\"mname\" class=\"referral-form-labels\">Middle Name </label>\r\n            <input id=\"mname\" type=\"text\" placeholder=\"Enter Middle Name\" formControlName=\"middlename\"\r\n              fieldKey=\"SETTINGS_USR_MIDDLE_NAME\" aria-describedby=\"mname\" pInputText\r\n              (keyup)=\"onPageNameInput($event, 'middlename')\" (input)=\"onInput($event, 'username', 'Middle Name', false)\" />\r\n            <div *ngIf=\"validationErrors['Middle Name']\" class=\"p-error block mt-1\">{{validationErrors['Middle Name']}}\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label for=\"lName\" class=\"referral-form-labels\">Last Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"lName\" type=\"text\" formControlName=\"lastname\" placeholder=\"Enter Last Name\"\r\n              fieldKey=\"SETTINGS_USR_LAST_NAME\" pInputText\r\n              (keyup)=\"onPageNameInput($event, 'lastname')\" aria-describedby=\"lName\"\r\n              (input)=\"onInput($event, 'username', 'Last Name', true)\"/>\r\n              <div *ngIf=\"validationErrors['Last Name']\" class=\"p-error block mt-1\">{{validationErrors['Last Name']}}</div>\r\n            <div *ngIf=\"!validationErrors['Last Name'] && formValidate['lastname'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['lastname'].invalid\" class=\"p-error block mt-1\">Last Name is required </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <!-- <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label for=\"userName\" class=\"referral-form-labels\">User Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"userName\" type=\"text\" formControlName=\"username\" placeholder=\"Enter User Name\"\r\n              aria-describedby=\"userName\" fieldKey=\"SETTINGS_USR_USERNAME\" pInputText />\r\n            <div *ngIf=\"formValidate['username'].errors && formSubmit\">\r\n              <small *ngIf=\"formValidate['username'].invalid\" class=\"p-error block\">User Name is required </small>\r\n            </div>\r\n          </div> -->\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label for=\"usersEmailid\" class=\"referral-form-labels\">Email\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"usersEmailid\" fieldKey=\"SETTINGS_USR_EMAIL\" formControlName=\"email\" placeholder=\"Enter Email\"\r\n              type=\"text\"\r\n              (input)=\"onInput($event, 'email', 'Email', true)\" pInputText />\r\n              <div *ngIf=\"validationErrors['Email']\" class=\"p-error block mt-1\">{{validationErrors['Email']}}</div>\r\n            <div *ngIf=\"!validationErrors['Email'] && formValidate['email'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['email'].errors['required']\" class=\"p-error block mt-1\">Email is required </div>\r\n            </div>\r\n            <!-- <div *ngIf=\"formValidate['email'].errors && formSubmit\">\r\n              <small *ngIf=\"formValidate['email'].errors['pattern']\" class=\"p-error block\">Valid email is required\r\n              </small>\r\n            </div> -->\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <label aria-labelledby=\"role\" for=\"role\" class=\"referral-form-labels\">Role\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown inputId=\"role\" [options]=\"userRoles\" placeholder=\"Select a Role\" formControlName=\"userroles\"\r\n              styleClass=\"w-100\" optionLabel=\"name\" [resetFilterOnHide]=\"true\" [filter]=\"true\" [showClear]=\"true\"\r\n              optionValue=\"id\" ariaFilterLabel=\"null\" fieldKey=\"SETTINGS_USR_ROLE\"\r\n              (onChange)=\"getRolePolicyGroups($event.value)\">\r\n              <ng-template let-item pTemplate=\"selectedItem\">\r\n                <div pTooltip=\"{{item?.name}}\" tooltipPosition=\"top\" class=\"text-truncate\"> {{ item?.name }}</div>\r\n              </ng-template>\r\n              <ng-template let-object pTemplate=\"item\">\r\n                {{ object.name }}\r\n              </ng-template>\r\n            </p-dropdown>\r\n            <div *ngIf=\"formValidate['userroles'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['userroles'].invalid\" class=\"p-error block mt-1\">Role is required </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-md-12 col-12\">\r\n            <p-accordion class=\"w-full policygroup-accordion\" iconPos=\"endVal\">\r\n              <p-accordionTab>\r\n                <ng-template pTemplate=\"header\">\r\n                  <span class=\"flex align-items-center head-text gap-2 w-full\">\r\n                    <span class=\"font-bold\"><label for=\"pGroup\" class=\"referral-form-labels mb-0\">Additional Policy Groups</label> <span *ngIf=\"policyGroupsLength > 0\" class=\"pg-count ml-2\">{{policyGroupsLength}}</span> </span>\r\n                  </span>\r\n                </ng-template>\r\n                <p-multiSelect [options]=\"policyGroupList\" formControlName=\"userpolicygroups\" [resetFilterOnHide]=\"true\"\r\n                  defaultLabel=\"Select Policy Groups\" optionLabel=\"policygroupname\" inputId=\"pGroup\"\r\n                  ariaFilterLabel=\"null\" fieldKey=\"SETTINGS_USR_POLICY_GROUP\" (onChange)=\"selectPolicyGroup()\" display=\"chip\" styleClass=\"policygroup-v2\">\r\n                  <ng-template let-value pTemplate=\"selectedItems\">\r\n                    <div *ngFor=\"let option of value\">\r\n                      <ng-container>\r\n                        <div #selectedpg class=\"p-multiselect-token\" [ngClass]=\"option.disabled ? 'disabled' : '' \" id=\"{{option.id}}\">\r\n                          <span class=\"policygroupname\">\r\n                            {{ option.policygroupname }}\r\n                          </span>\r\n                          <span class=\"rolepg ml-2 badge badge-primary\" *ngIf=\"option.disabled\">\r\n                            Role\r\n                          </span>\r\n                          <em class=\"pi pi-times-circle ml-2 clear-icon right-sec\" *ngIf=\"!option.disabled\" role=\"button\"\r\n                            (click)=\"removeValue($event, selectedpg)\"></em>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                    <div *ngIf=\"!value || value.length === 0\">Select Policy Groups\r\n                    </div>\r\n                  </ng-template>\r\n                  <ng-template let-pg pTemplate=\"item\">\r\n                    <div class=\"d-flex align-items-center flex-row justify-content-between gap-2 disabled-list w-100\">\r\n                      <div>{{ pg.name }}</div>\r\n                      <span class=\"rolepg ml-2 badge badge-primary\" *ngIf=\"pg.disabled\">Role</span>\r\n                    </div>\r\n                  </ng-template>\r\n                </p-multiSelect>\r\n              </p-accordionTab>\r\n            </p-accordion>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-md-12 col-12 mb-1 d-flex align-items-center\" *ngIf=\"!sendCredentials\">\r\n            <label for=\"file\" class=\"btn btn-primary mt-2 mb-2 profile d-flex align-items-center\">\r\n              <span class=\"material-icon material-symbols-outlined action-btn upload mr-2\">cloud_upload</span>Add\r\n              Image</label>\r\n            <span class=\"material-icon material-symbols-outlined text-muted action-btn mx-2\"\r\n              pTooltip=\"Supported file formats are JPG, PNG, JPEG and GIF\" style=\"cursor: pointer;\">\r\n              Info\r\n            </span>\r\n            <input type=\"file\" (change)=\"handleFileInput($event)\" id=\"file\" aria-hidden=\"true\"\r\n              style=\"visibility: hidden; display: none\" />\r\n            <img *ngIf=\"userForm.controls['thumbnail'].value\" [src]=\"userForm.controls['thumbnail'].value\" alt=\"user\"\r\n              class=\"userempty mr-0\" />\r\n            <label class=\"warning ml-2 mb-md-0\"\r\n              [ngStyle]=\"{ color: imageInformation === 'Image size exceeds 100 KB' ? '#fc0303' : '#007cc3'}\">{{\r\n              imageInformation }}</label> <em class=\"pi pi-trash ml-2\" pTooltip=\"Remove Image\"\r\n              *ngIf=\"userForm.controls['thumbnail'].value && imageInformation !== 'Image size exceeds 100 KB'\"\r\n              (click)=\"onClickRemoveProfile()\" style=\"cursor: pointer;\"></em>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <div class=\"p-field-checkbox send-credentials\" *ngIf=\"sendCredentials\">\r\n              <p-checkbox class=\"p-m-1 p-m-lg-2\" inputId=\"binary\" [binary]=\"true\"\r\n                fieldKey=\"SETTINGS_USR_EMAIL_TO_CURRENT_USER\" formControlName=\"emailtocurrentuser\">\r\n              </p-checkbox>\r\n              <label for=\"binary\">Send Credentials to Current Logged in User</label>\r\n            </div>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <div class=\"p-field-checkbox send-credentials\" *ngIf=\"!sendCredentials\">\r\n              <p-checkbox class=\"p-m-1 p-m-lg-2\" inputId=\"isenabled\" [binary]=\"true\" formControlName=\"isenabled\">\r\n              </p-checkbox>\r\n              <label for=\"isenabled\">Active</label>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\">\r\n            <div class=\"p-field-checkbox send-credentials\" *ngIf=\"!sendCredentials\">\r\n              <p-checkbox class=\"p-m-1 p-m-lg-2\" inputId=\"islocked\" [binary]=\"true\" formControlName=\"islocked\">\r\n              </p-checkbox>\r\n              <label for=\"islocked\">Locked</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid row\">\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\"></div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12\"></div>\r\n          <div class=\"p-field col-lg-4 col-sm-4 col-md-12 col-12 mb-0\">\r\n            <button fieldKey=\"SETTINGS_USR_ADD_UPDATE\" class=\"pull-right mr-2 mb-2 btn btn-primary btncommon\"\r\n              (click)=\"addUser()\">\r\n              {{ userid ? 'Update User' : 'Add User' }}\r\n            </button>\r\n            <button fieldKey=\"SETTINGS_USR_CANCEL\" class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\"\r\n              (click)=\"cancelUser()\">\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal\" id=\"Deleteuser\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Delete User</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        Are you sure want to Delete User?\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\" (click)=\"deleteUser()\">\r\n            Delete\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal\" id=\"DeleteProfile\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Delete Profile Image</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        Are you sure you want to delete the Profile Image?\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\"\r\n            (click)=\"removeThumbnail()\">\r\n            Delete\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">Cancel</button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:var(--font-13)}.useracess{border-radius:2px;padding:5px 0;overflow-y:auto}.pi-trash{color:red;font-size:var(--font-16)}.action-btn.upload{font-size:var(--font-19)}.userempty{max-width:none;border-radius:50%;height:35px;width:35px;display:inline-block;margin-right:15px}.row.userdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}.overflow_txt.userInforight{display:inline-block;vertical-align:middle;width:calc(100% - 50px)}.lock-icon{position:absolute;right:15px;top:50%;margin-top:-13px}span.nameuser{font-size:var(--font-13);color:var(--label-text);font-weight:600}.userid,span.emailuser{font-size:var(--font-13);color:#767676}.activate{position:absolute;margin-top:-46px;margin-left:44rem}.toggleleft{font-size:var(--font-14);font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-left:12px}.rbac-card .profile{color:#fff}.right-icons .fa{margin-top:3px;display:inline-block;z-index:9}.right-icons .fa-lock{font-size:var(--font-18)}.right-icons .fa-trash{font-size:var(--font-18)}@media screen and (max-width: 767px){.useracess{max-height:400px}}@media screen and (min-width: 768px){.useracess{height:calc(100vh - 188px)}}@media screen and (min-width: 990px) and (max-width: 1024px){.useracess .userempty{height:100%;width:100%}}:host ::ng-deep .clear-icon{font-size:13px}:host ::ng-deep .policygroup-accordion .policygroup-v2.p-multiselect .p-multiselect-panel{top:auto!important}\n"], components: [{ type: i5.AlertComponent, selector: "app-alert" }, { type: i6.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i7.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }, { type: i8.Accordion, selector: "p-accordion", inputs: ["multiple", "style", "styleClass", "expandIcon", "collapseIcon", "activeIndex"], outputs: ["onClose", "onOpen", "activeIndexChange"] }, { type: i8.AccordionTab, selector: "p-accordionTab", inputs: ["header", "disabled", "cache", "transitionOptions", "selected"], outputs: ["selectedChange"] }, { type: i9.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "autoZIndex", "baseZIndex", "filterBy", "virtualScroll", "itemSize", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "scrollHeight", "defaultLabel", "placeholder", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide"] }, { type: i10.Checkbox, selector: "p-checkbox", inputs: ["value", "name", "disabled", "binary", "label", "ariaLabelledBy", "ariaLabel", "tabindex", "inputId", "style", "styleClass", "labelStyleClass", "formControl", "checkboxIcon", "readonly", "required", "trueValue", "falseValue"], outputs: ["onChange"] }], directives: [{ type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i11.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i12.InputText, selector: "[pInputText]" }, { type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i13.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i14.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { type: i15.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { type: i13.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: UsersComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'users',
                    templateUrl: './users.component.html',
                    styleUrls: ['./users.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.UserOrgService }, { type: i2.FormBuilder }, { type: i3.AlertService }, { type: i4.DataStoreService }]; }, propDecorators: { RBACORG: [{
                type: Input
            }], PERMISSION: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtdXNlcnMvc3JjL2xpYi9waWNzLXJiYWMtdXNlcnMvdXNlcnMvdXNlcnMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtdXNlcnMvc3JjL2xpYi9waWNzLXJiYWMtdXNlcnMvdXNlcnMvdXNlcnMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWTFELE1BQU0sT0FBTyxjQUFjO0lBcUN6QixZQUNVLFdBQTJCLEVBQzNCLEVBQWUsRUFDZixZQUEwQixFQUMxQixhQUErQjtRQUgvQixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFDM0IsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUNmLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQXhDekIsWUFBTyxHQUFhLElBQUksUUFBUSxFQUFFLENBQUM7UUFFbkQsYUFBUSxHQUFnQixFQUFFLENBQUM7UUFDM0IsaUJBQVksR0FBb0IsRUFBRSxDQUFDO1FBQ25DLHFCQUFnQixHQUFnQixFQUFFLENBQUM7UUFDbkMsa0JBQWEsR0FBYSxFQUFFLENBQUM7UUFDN0Isa0JBQWEsR0FBYSxFQUFFLENBQUM7UUFNN0IsZ0JB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RyxlQUFlLENBQUMsS0FBSztpQkFDakMsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDVixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLGVBQWUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDM0QsMEJBQTBCO1lBQzFCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDOzs0R0EzZ0JVLGNBQWM7Z0dBQWQsY0FBYyx1R0NsQjNCLDAwaUJBb1NNOzRGRGxSTyxjQUFjO2tCQUwxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxPQUFPO29CQUNqQixXQUFXLEVBQUUsd0JBQXdCO29CQUNyQyxTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztpQkFDdEM7eUxBRWlCLE9BQU87c0JBQXRCLEtBQUs7Z0JBQ1UsVUFBVTtzQkFBekIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQXBwQ29uc3RhbnRzIH0gZnJvbSAnLi4vQGNvcmUvY29uc3RhbnRzL2FwcC1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBQcm92aWRlckdyb3VwLCBVc2VyR3JvdXAgfSBmcm9tICcuLi9AY29yZS9kYXRhbW9kZWwvdXNlckRhdGFNb2RlbCc7XHJcbmltcG9ydCB7IFJCQUNJTkZPIH0gZnJvbSAnLi4vQGNvcmUvdXJscy91c2Vycy11cmwuY29uZmlnJztcclxuaW1wb3J0IHsgVXNlck9yZ1NlcnZpY2UgfSBmcm9tICcuLi9AY29yZS9zZXJ2aWNlL3VzZXItb3JnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9AY29yZS9zZXJ2aWNlL2FsZXJ0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEYXRhU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9kYXRhLXN0b3JlLnNlcnZpY2UnO1xyXG5cclxuZGVjbGFyZSBjb25zdCAkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3VzZXJzJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdXNlcnMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3VzZXJzLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFVzZXJzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSBwdWJsaWMgUkJBQ09SRzogUkJBQ0lORk8gPSBuZXcgUkJBQ0lORk8oKTtcclxuICBASW5wdXQoKSBwdWJsaWMgUEVSTUlTU0lPTjogYW55O1xyXG4gIHVzZXJMaXN0OiBVc2VyR3JvdXBbXSA9IFtdO1xyXG4gIHByb3ZpZGVyTGlzdDogUHJvdmlkZXJHcm91cFtdID0gW107XHJcbiAgZmlsdGVyZWRVc2VyTGlzdDogVXNlckdyb3VwW10gPSBbXTtcclxuICBzZWxlY3RlZFJvbGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHNlbGVjdGVkVGVhbXM6IHN0cmluZ1tdID0gW107XHJcbiAgdXNlclJvbGVzITogYW55W107XHJcbiAgdXNlclRlYW1zITogYW55W107XHJcbiAgZm9ybVN1Ym1pdDogYm9vbGVhbjtcclxuICBkaXNhYmxlZCE6IGJvb2xlYW47XHJcbiAgdXNlckZvcm0hOiBGb3JtR3JvdXA7XHJcbiAgdXNlclNlYXJjaCQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgZGVsZXRlZElkITogc3RyaW5nO1xyXG4gIHVzZXJpZDogYW55O1xyXG4gIGNoZWNrZWQ6IGJvb2xlYW47XHJcbiAgc2VuZENyZWRlbnRpYWxzOiBib29sZWFuO1xyXG4gIHByb3ZpZGVyQWNjb3VudDogYm9vbGVhbjtcclxuICB1cGxvYWRlZEZpbGU6IGFueTtcclxuICB1cmxQYXRoOiBhbnk7XHJcbiAgaW1hZ2VEYXRhOiBhbnk7XHJcbiAgYXR0YWNoVHlwZTogYW55O1xyXG4gIGltYWdlSW5mb3JtYXRpb24hOiBzdHJpbmc7XHJcbiAgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gIHBvbGljeUdyb3VwTGlzdDogYW55O1xyXG4gIG9yZ0luZm86IGFueTtcclxuICBvcmdJZDogYW55O1xyXG4gIGZpcnN0bmFtZTogc3RyaW5nO1xyXG4gIGh0dHBTZXJ2aWNlOiBhbnk7XHJcbiAgbGFzdG5hbWU6IHN0cmluZztcclxuICBtaWRkbGVuYW1lOiBzdHJpbmc7XHJcbiAgcm9sZVBvbGljeUdyb3VwczogYW55ID0gW107XHJcbiAgdXNlclBvbGljeUdyb3VwczogYW55ID0gW107XHJcbiAgdmFsaWRhdGlvbkVycm9yczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gIGlucHV0VmFsaWRhdGlvbk1ldGhvZDogYW55O1xyXG4gIHBvbGljeUdyb3Vwc0xlbmd0aDogYW55O1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlck9yZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZiOiBGb3JtQnVpbGRlcixcclxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9zdG9yZXNlcnZpY2U6IERhdGFTdG9yZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMuZm9ybVN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5wcm92aWRlckFjY291bnQgPSBmYWxzZTtcclxuICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB0aGlzLnNlbmRDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICB0aGlzLmltYWdlSW5mb3JtYXRpb24gPSAnJztcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUZvcm0oKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5fc3RvcmVzZXJ2aWNlLmN1cnJlbnRTdG9yZS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICB0aGlzLmlucHV0VmFsaWRhdGlvbk1ldGhvZCA9IHJlc1snSU5QVVRWQUxJREFUSU9OTUVUSE9EJ11cclxuICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlID0gcmVzWydIVFRQU0VSVklDRSddXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICBpZiAodGhpcy5SQkFDT1JHWydvcmdJRCddKSB7XHJcbiAgICAgIHRoaXMub3JnSWQgPSBwYXJzZUludCh0aGlzLlJCQUNPUkdbJ29yZ0lEJ10pO1xyXG4gICAgICBpZiAodGhpcy5vcmdJZCkge1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlckxpc3QoKTtcclxuICAgICAgICB0aGlzLmdldFJvbGVzTGlzdCgpO1xyXG4gICAgICAgIHRoaXMuZ2V0UG9saWN5R3JvdXBMaXN0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXRpYWxpemVGb3JtKCkge1xyXG4gICAgdGhpcy51c2VyRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICBmaXJzdG5hbWU6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgIG1pZGRsZW5hbWU6IFsnJ10sXHJcbiAgICAgIGxhc3RuYW1lOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICB1c2VybmFtZTogWycnXSxcclxuICAgICAgLy8gZG9iOiBbJyddLFxyXG4gICAgICBlbWFpbDogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5wYXR0ZXJuKEFwcENvbnN0YW50cy5yZWdleEVtYWlsKV1dLFxyXG4gICAgICB1c2Vycm9sZXM6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbiAgICAgIHVzZXJ0ZWFtczogWycnXSxcclxuICAgICAgdXNlcnBvbGljeWdyb3VwczogWycnXSxcclxuICAgICAgb3JnYW5pemF0aW9uaWQ6IFsnJ10sXHJcbiAgICAgIGVtYWlsdG9jdXJyZW50dXNlcjogZmFsc2UsXHJcbiAgICAgIGlzZW5hYmxlZDogW3RydWVdLFxyXG4gICAgICBwcm92aWRlcklkOiBbJyddLFxyXG4gICAgICBwcm92aWRlckFjY291bnQ6IGZhbHNlLFxyXG4gICAgICB0aHVtYm5haWw6IFsnJ10sXHJcbiAgICAgIGlzbG9ja2VkOiBbZmFsc2VdXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldCBmb3JtVmFsaWRhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyRm9ybS5jb250cm9scztcclxuICB9XHJcblxyXG4gIG9uSW5wdXQoZXZlbnQ6IEV2ZW50LCBmaWVsZHR5cGU6IGFueSwgbGFiZWw6IGFueSwgcmVxdWlyZWQ6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IGVycm9yID0gdGhpcy5pbnB1dFZhbGlkYXRpb25NZXRob2QoZXZlbnQsIGZpZWxkdHlwZSwgbGFiZWwsIHJlcXVpcmVkKTtcclxuICAgIGlmIChlcnJvciAmJiB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9yc1tsYWJlbF0gPSBlcnJvcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnZhbGlkYXRpb25FcnJvcnNbbGFiZWxdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckxpc3QoX2tleT86IHN0cmluZykge1xyXG4gICAgdGhpcy51c2VyU2VydmljZS5nZXRBbGxVc2VyT3JnTGlzdCh0aGlzLm9yZ0lkKS5zdWJzY3JpYmUoXHJcbiAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyZWRVc2VyTGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMudXNlckxpc3QgPSByZXMuZGF0YTtcclxuICAgICAgICB0aGlzLmZpbHRlcmVkVXNlckxpc3QgPSB0aGlzLnVzZXJMaXN0O1xyXG4gICAgICB9LFxyXG4gICAgICAoX2Vycm9yOiBhbnkpID0+IHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKEFwcENvbnN0YW50cy5lcnJvck1lc3NhZ2UpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZ2V0Um9sZXNMaXN0KCkge1xyXG4gICAgdGhpcy51c2VyU2VydmljZS5nZXRBbGxVc2VyUm9sZSh0aGlzLm9yZ0lkKS5zdWJzY3JpYmUoXHJcbiAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMudXNlclJvbGVzID0gcmVzWydkYXRhJ107XHJcbiAgICAgIH0sXHJcbiAgICAgIChfZXJyb3I6IGFueSkgPT4gdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoQXBwQ29uc3RhbnRzLmVycm9yTWVzc2FnZSlcclxuICAgICk7XHJcbiAgfVxyXG4gIGNsZWFyU2VhcmNoKGV2ZW50OiBFdmVudCkge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tY29udHJvbCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBpZiAoaW5wdXRFbGVtZW50KSB7XHJcbiAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9ICcnO1xyXG4gICAgICB0aGlzLmZpbHRlcmVkVXNlckxpc3QgPSB0aGlzLnVzZXJMaXN0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UG9saWN5R3JvdXBMaXN0KF9tYW5hZ2VtZW50R3JvdXBJZD86IG51bWJlcikge1xyXG4gICAgdGhpcy51c2VyU2VydmljZS5nZXRPcmdQb2xpY3lHcm91cExpc3QodGhpcy5vcmdJZCkuc3Vic2NyaWJlKFxyXG4gICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnBvbGljeUdyb3VwTGlzdCA9IHJlc1snZGF0YSddLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycilcclxuICAgICk7XHJcbiAgfVxyXG4gIGFkZFVzZXIoKSB7XHJcbiAgICBjb25zdCB1c2VyRGF0YSA9IHRoaXMudXNlckZvcm0uZ2V0UmF3VmFsdWUoKTtcclxuICAgIGRlbGV0ZSB1c2VyRGF0YS50aHVtYm5haWw7XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSB0cnVlO1xyXG4gICAgaWYgKHRoaXMudXNlckZvcm0udmFsaWQpIHtcclxuICAgICAgY29uc3Qgcm9sZVBvbGljeUdyb3Vwc0lkcyA9IHRoaXMucm9sZVBvbGljeUdyb3Vwcy5tYXAoaXRlbSA9PiBpdGVtLmlkKTtcclxuICAgICAgY29uc3QgZmlsdGVyZWRVc2VyUG9saWN5R3JvdXBzID0gdXNlckRhdGEudXNlcnBvbGljeWdyb3Vwcy5maWx0ZXIoaXRlbSA9PiAhcm9sZVBvbGljeUdyb3Vwc0lkcy5pbmNsdWRlcyhpdGVtLmlkKSkubWFwKGl0ZW0gPT4gaXRlbS5pZCk7XHJcbiAgICAgIHVzZXJEYXRhLm9yZ2FuaXphdGlvbmlkID0gdGhpcy5vcmdJZDtcclxuICAgICAgdXNlckRhdGEuaWQgPSAxO1xyXG4gICAgICB1c2VyRGF0YS51c2VydGVhbXMgPSB1c2VyRGF0YS51c2VydGVhbXMgfHwgW107XHJcbiAgICAgIHVzZXJEYXRhLnVzZXJyb2xlcyA9IFt1c2VyRGF0YS51c2Vycm9sZXNdIHx8IFtdO1xyXG4gICAgICB1c2VyRGF0YS51c2VycG9saWN5Z3JvdXBzID0gZmlsdGVyZWRVc2VyUG9saWN5R3JvdXBzXHJcbiAgICAgIHVzZXJEYXRhLmVtYWlsdG9jdXJyZW50dXNlciA9IHVzZXJEYXRhLmVtYWlsdG9jdXJyZW50dXNlciB8fCBmYWxzZTtcclxuICAgICAgdXNlckRhdGEudXNlcm5hbWUgPSB1c2VyRGF0YS51c2VybmFtZSB8fCBcIlwiO1xyXG4gICAgICAvLyB1c2VyRGF0YS5kb2IgPSBuZXcgRGF0ZVBpcGUoJ2VuLVVTJykudHJhbnNmb3JtKHVzZXJEYXRhLmRvYiwgJ1lZWVktTU0tZGQnKTtcclxuICAgICAgaWYgKCF0aGlzLnVzZXJpZCkge1xyXG4gICAgICAgIHRoaXMudXNlcldpdGhPdXRJZCh1c2VyRGF0YSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy51c2VyV2l0aElEKHVzZXJEYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICB1c2VyV2l0aE91dElkKHVzZXJEYXRhOiBhbnkpIHtcclxuICAgIHRoaXMudXNlclNlcnZpY2Uuc2F2ZVVzZXIodXNlckRhdGEpLnN1YnNjcmliZShcclxuICAgICAgKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXJBY2NvdW50ICYmIHRoaXMudXNlckZvcm0uY29udHJvbHNbJ3Byb3ZpZGVySWQnXS52YWxpZCkge1xyXG4gICAgICAgICAgdGhpcy5hZGRQcm92aWRlclVzZXIodXNlckRhdGEucHJvdmlkZXJJZCwgcmVzWydkYXRhJ10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbmNlbCh0cnVlKTtcclxuICAgICAgICB0aGlzLmdldFVzZXJMaXN0KCk7XHJcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnVXNlciBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvci5lcnJvci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5lcnJvcihlcnJvci5lcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdXNlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcbiAgdXNlcldpdGhJRCh1c2VyRGF0YTogYW55KSB7XHJcbiAgICBpZiAodGhpcy51cGxvYWRlZEZpbGUpIHtcclxuICAgICAgdXNlckRhdGEuYWRkaXRpb25hbGluZm8gPSB7XHJcbiAgICAgICAgcGhvdG86IHRoaXMuaW1hZ2VEYXRhLFxyXG4gICAgICAgIHRodW1ibmFpbDogdGhpcy5pbWFnZURhdGFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHRoaXMudXNlclNlcnZpY2UudXBkYXRlVXNlcih1c2VyRGF0YSwgdGhpcy51c2VyaWQpLnN1YnNjcmliZShcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsKGZhbHNlKTtcclxuICAgICAgICB0aGlzLmdldFVzZXJMaXN0KCk7XHJcbiAgICAgICAgdGhpcy51c2VyRm9ybS5jb250cm9sc1sndXNlcm5hbWUnXS5kaXNhYmxlKCk7XHJcbiAgICAgICAgdGhpcy51c2VyRm9ybS5jb250cm9sc1snZW1haWwnXS5kaXNhYmxlKCk7XHJcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnVXNlciB1cGRhdGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXJyLmVycm9yLm1lc3NhZ2UpIHtcclxuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKGVyci5lcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdXNlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG1hcFVzZXJUb1JvbGUodXNlcklkOiBhbnksIHJvbGVJZDogYW55KSB7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICB1c2VySWQ6IHVzZXJJZCxcclxuICAgICAgcm9sZUlkOiByb2xlSWRcclxuICAgIH07XHJcbiAgICB0aGlzLnVzZXJTZXJ2aWNlLmFkZFVzZXJSb2xlKHJlcXVlc3QpLnN1YnNjcmliZSgoKSA9PiBjb25zb2xlLmxvZygnVXNlciBtYXBwZWQgdG8gcm9sZSBTdWNjZXNzZnVsbHknKSk7XHJcbiAgfVxyXG4gIG9uQ2xpY2tBZGRVc2VyKCkge1xyXG4gICAgdGhpcy51c2VyRm9ybS5jb250cm9sc1snZW1haWwnXS5lbmFibGUoKTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUZvcm0oKTtcclxuICAgIHRoaXMudXNlckZvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMuZm9ybVN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZW5kQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgdGhpcy51c2VyaWQgPSAnJztcclxuICAgIHRoaXMudXNlclBvbGljeUdyb3VwcyA9IFtdO1xyXG4gICAgdGhpcy5yb2xlUG9saWN5R3JvdXBzID0gW107XHJcbiAgICB0aGlzLnBvbGljeUdyb3VwTGlzdC5tYXAoKHApID0+IHAuZGlzYWJsZWQgPSBmYWxzZSk7XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgIHRoaXMucG9saWN5R3JvdXBzTGVuZ3RoID0gMDtcclxuICB9XHJcbiAgY2FuY2VsKGNoYW5nZUZsYWcpIHtcclxuICAgIGlmICghdGhpcy51c2VyaWQpIHtcclxuICAgICAgdGhpcy51c2VyRm9ybS5yZXNldCgpO1xyXG4gICAgICB0aGlzLnVzZXJGb3JtLnBhdGNoVmFsdWUoe1xyXG4gICAgICAgIGlzZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBpc2xvY2tlZDogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHt9O1xyXG4gICAgICB0aGlzLnBvbGljeUdyb3Vwc0xlbmd0aCA9IDA7XHJcbiAgICB9XHJcbiAgICB0aGlzLnByb3ZpZGVyQWNjb3VudCA9IGZhbHNlO1xyXG4gICAgdGhpcy5mb3JtU3VibWl0ID0gZmFsc2U7XHJcbiAgICB0aGlzLnVzZXJGb3JtLmNvbnRyb2xzWydlbWFpbCddLmVuYWJsZSgpO1xyXG4gICAgdGhpcy51c2VyRm9ybS5jb250cm9sc1sndXNlcm5hbWUnXS5lbmFibGUoKTtcclxuICAgIGlmIChjaGFuZ2VGbGFnKSB7XHJcbiAgICAgIHRoaXMucG9saWN5R3JvdXBMaXN0Lm1hcCgocCkgPT4gcC5kaXNhYmxlZCA9IGZhbHNlKTtcclxuICAgIH1cclxuICAgIHRoaXMudXNlclBvbGljeUdyb3VwcyA9IFtdO1xyXG4gICAgdGhpcy5yb2xlUG9saWN5R3JvdXBzID0gW107XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIHNlYXJjaFVzZXIoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHRoaXMuZmlsdGVyZWRVc2VyTGlzdCA9IHRoaXMudXNlckxpc3QuZmlsdGVyKGEgPT4gYT8uZmlyc3RuYW1lPy50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKHVzZXI6IGFueSkge1xyXG4gICAgdGhpcy51c2VyUG9saWN5R3JvdXBzID0gW107XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgIHRoaXMuZm9ybVN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZW5kQ3JlZGVudGlhbHMgPSBmYWxzZTtcclxuICAgIHRoaXMudXNlcmlkID0gdXNlci5pZDtcclxuICAgIHRoaXMudXNlclNlcnZpY2UuZ2V0QWxsVXNlckxpc3QodGhpcy51c2VyaWQpLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgLy8gdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gcmVzLmRhdGEuYWRkaXRpb25hbGluZm8/LnRodW1ibmFpbD8uZmlsZU5hbWU/LnNwbGl0KCcvJylbMl0gfHwgJyc7XHJcbiAgICAgIHRoaXMudXNlckZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgZmlyc3RuYW1lOiByZXMuZGF0YS5maXJzdG5hbWUsXHJcbiAgICAgICAgbWlkZGxlbmFtZTogcmVzLmRhdGEubWlkZGxlbmFtZSxcclxuICAgICAgICBsYXN0bmFtZTogcmVzLmRhdGEubGFzdG5hbWUsXHJcbiAgICAgICAgdXNlcm5hbWU6IHJlcy5kYXRhLnVzZXJuYW1lLFxyXG4gICAgICAgIC8vIGRvYjogbmV3IERhdGUocmVzLmRhdGEuZG9iKSxcclxuICAgICAgICBlbWFpbDogcmVzLmRhdGEuZW1haWwsXHJcbiAgICAgICAgb3JnYW5pemF0aW9uaWQ6IHJlcy5kYXRhLm9yZ2FuaXphdGlvbmlkLFxyXG4gICAgICAgIHRodW1ibmFpbDogcmVzLmRhdGEuYWRkaXRpb25hbGluZm8/LnRodW1ibmFpbD8udXJsIHx8ICcnLFxyXG4gICAgICAgIGlzZW5hYmxlZDogcmVzPy5kYXRhPy5pc2VuYWJsZWQsXHJcbiAgICAgICAgaXNsb2NrZWQ6IHJlcz8uZGF0YT8uaXNsb2NrZWQsXHJcbiAgICAgICAgdXNlcnJvbGVzOiByZXM/LmRhdGE/LnVzZXJyb2xlc1swXT8uaWQgfHwgMCxcclxuICAgICAgICB1c2VydGVhbXM6IHJlcy5kYXRhLnVzZXJ0ZWFtc1xyXG4gICAgICAgICAgPyByZXMuZGF0YS51c2VydGVhbXNcclxuICAgICAgICAgICAgLmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtKVxyXG4gICAgICAgICAgICAubWFwKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbVsnaWQnXTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIDogW10sXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBsaXN0ID0gdGhpcy5wb2xpY3lHcm91cExpc3Q7XHJcbiAgICAgIGNvbnN0IFVQR3MgPSByZXMuZGF0YS5wb2xpY3lncm91cHM7XHJcbiAgICAgIFVQR3MuZm9yRWFjaCh1cGcgPT4ge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nUG9saWN5ID0gbGlzdC5maW5kKGYgPT4gZi5pZCA9PT0gdXBnLmlkKTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdQb2xpY3kpIHRoaXMudXNlclBvbGljeUdyb3Vwcy5wdXNoKGV4aXN0aW5nUG9saWN5KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuZ2V0Um9sZVBvbGljeUdyb3Vwcyh0aGlzLnVzZXJGb3JtLnZhbHVlLnVzZXJyb2xlcyk7XHJcblxyXG4gICAgICB0aGlzLnVzZXJGb3JtLmNvbnRyb2xzWydlbWFpbCddLmRpc2FibGUoKTtcclxuICAgICAgdGhpcy51c2VyRm9ybS5jb250cm9sc1sndXNlcm5hbWUnXS5kaXNhYmxlKCk7XHJcbiAgICAgIC8vIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJlbW92ZVZhbHVlKGUsIGl0ZW0pIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBjb25zdCBzZWxlY3RlZFBHcyA9IHRoaXMudXNlckZvcm0udmFsdWUudXNlcnBvbGljeWdyb3VwcztcclxuICAgIGNvbnN0IGZpbHRlcmVkUGdzID0gc2VsZWN0ZWRQR3MuZmlsdGVyKChzKSA9PiBzLmlkICE9PSBOdW1iZXIoaXRlbS5pZCkpO1xyXG4gICAgdGhpcy51c2VyRm9ybS5wYXRjaFZhbHVlKHtcclxuICAgICAgdXNlcnBvbGljeWdyb3VwczogZmlsdGVyZWRQZ3NcclxuICAgIH0pXHJcbiAgICB0aGlzLnBvbGljeUdyb3Vwc0xlbmd0aCA9IHRoaXMudXNlckZvcm0udmFsdWUudXNlcnBvbGljeWdyb3Vwcy5sZW5ndGg7XHJcbiAgfVxyXG4gIGdldFJvbGVQb2xpY3lHcm91cHMocm9sZUlkOiBhbnkpIHtcclxuICAgIHRoaXMucG9saWN5R3JvdXBMaXN0LmZvckVhY2gocGcgPT4gcGdbJ2Rpc2FibGVkJ10gPSBmYWxzZSk7XHJcbiAgICBpZiAoIXJvbGVJZCkge1xyXG4gICAgICB0aGlzLnJvbGVQb2xpY3lHcm91cHMgPSBbXTtcclxuICAgICAgdGhpcy51c2VyRm9ybS5wYXRjaFZhbHVlKHtcclxuICAgICAgICB1c2VycG9saWN5Z3JvdXBzOiBbXSxcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMudXNlclNlcnZpY2UuZ2V0Um9sZUJ5SWQocm9sZUlkKS5zdWJzY3JpYmUoXHJcbiAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgIHRoaXMucm9sZVBvbGljeUdyb3VwcyA9IHJlc1snZGF0YSddLnBvbGljeUdyb3Vwcy5zb3J0KChhLCBiKSA9PiBhLnBvbGljeWdyb3VwbmFtZS5sb2NhbGVDb21wYXJlKGIucG9saWN5Z3JvdXBuYW1lKSk7XHJcbiAgICAgICAgICBjb25zdCBQR1MgPSByZXNbJ2RhdGEnXS5wb2xpY3lHcm91cHNcclxuICAgICAgICAgICAgLmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtKVxyXG4gICAgICAgICAgICAubWFwKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgfSkgfHwgW11cclxuXHJcbiAgICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLnBvbGljeUdyb3VwTGlzdDtcclxuICAgICAgICAgIFBHUy5tYXAoKHBnOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGdFeGlzdHMgPSBsaXN0LmZpbHRlcigoZikgPT4gZi5pZCA9PT0gcGcuaWQpXHJcbiAgICAgICAgICAgIGlmIChwZ0V4aXN0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBhcnIucHVzaChwZ0V4aXN0c1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy51c2VyRm9ybS5wYXRjaFZhbHVlKHtcclxuICAgICAgICAgICAgdXNlcnBvbGljeWdyb3VwczogYXJyXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgY29uc3Qgcm9sZVBHcyA9IHRoaXMudXNlckZvcm0udmFsdWUudXNlcnBvbGljeWdyb3Vwcy5tYXAoKHIpID0+IHIuaWQpO1xyXG4gICAgICAgICAgY29uc3QgaW5jbHVkZWRJbmRleGVzID0gW107XHJcbiAgICAgICAgICBjb25zdCBleGNsdWRlZEluZGV4ZXMgPSBbXTtcclxuICAgICAgICAgIHRoaXMucG9saWN5R3JvdXBMaXN0LmZvckVhY2goKHBnLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocm9sZVBHcy5pbmNsdWRlcyhwZy5pZCkpIHtcclxuICAgICAgICAgICAgICBpbmNsdWRlZEluZGV4ZXMucHVzaChpbmRleCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXhjbHVkZWRJbmRleGVzLnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnN0IHJlb3JkZXJlZExpc3QgPSBpbmNsdWRlZEluZGV4ZXMubWFwKGluZGV4ID0+IHRoaXMucG9saWN5R3JvdXBMaXN0W2luZGV4XSkuY29uY2F0KGV4Y2x1ZGVkSW5kZXhlcy5tYXAoaW5kZXggPT4gdGhpcy5wb2xpY3lHcm91cExpc3RbaW5kZXhdKSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZW9yZGVyZWRMaXN0LCBcInJlb3JkZXJcIik7XHJcbiAgICAgICAgICByZW9yZGVyZWRMaXN0LmZvckVhY2gocGcgPT4ge1xyXG4gICAgICAgICAgICBpZiAocm9sZVBHcy5pbmNsdWRlcyhwZy5pZCkpIHtcclxuICAgICAgICAgICAgICBwZ1snZGlzYWJsZWQnXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5wb2xpY3lHcm91cExpc3QgPSByZW9yZGVyZWRMaXN0O1xyXG4gICAgICAgICAgdGhpcy51c2VyUG9saWN5R3JvdXBzID0gdGhpcy51c2VyUG9saWN5R3JvdXBzLnNvcnQoKGEsIGIpID0+IGEucG9saWN5Z3JvdXBuYW1lLmxvY2FsZUNvbXBhcmUoYi5wb2xpY3lncm91cG5hbWUpKTtcclxuICAgICAgICAgIGNvbnN0IGFsbFBvbGljeUdyb3VwcyA9IHRoaXMudXNlckZvcm0udmFsdWUudXNlcnBvbGljeWdyb3Vwcy5jb25jYXQodGhpcy51c2VyUG9saWN5R3JvdXBzKTtcclxuICAgICAgICAgIHRoaXMudXNlckZvcm0ucGF0Y2hWYWx1ZSh7IHVzZXJwb2xpY3lncm91cHM6IGFsbFBvbGljeUdyb3VwcyB9KTtcclxuICAgICAgICAgIHRoaXMucG9saWN5R3JvdXBzTGVuZ3RoID0gdGhpcy51c2VyRm9ybS52YWx1ZS51c2VycG9saWN5Z3JvdXBzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIChfZXJyOiBhbnkpID0+IHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKCdGYWlsZWQgdG8gRmV0Y2ggUG9saWN5IEdyb3VwcycpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGV2ZW50OiBFdmVudCwgaWQ6IGFueSkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB0aGlzLmRlbGV0ZWRJZCA9IGlkO1xyXG4gICAgJCgnI0RlbGV0ZXVzZXInKS5tb2RhbCgnc2hvdycpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlVXNlcigpIHtcclxuICAgIHRoaXMudXNlclNlcnZpY2UuZGVsZXRlVXNlcih0aGlzLmRlbGV0ZWRJZCkuc3Vic2NyaWJlKFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYW5jZWwodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnVXNlciBkZWxldGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICAgICQoJyNEZWxldGV1c2VyJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICB0aGlzLmdldFVzZXJMaXN0KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIChfZXJyOiBhbnkpID0+IHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIFVzZXInKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNhbmNlbFVzZXIoKSB7XHJcbiAgICB0aGlzLnNlbmRDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSBmYWxzZTtcclxuICAgIHRoaXMudXNlckZvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMudXNlckZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgIGlzZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgaXNsb2NrZWQ6IGZhbHNlXHJcbiAgICB9KTtcclxuICAgIHRoaXMudXNlckZvcm0uY29udHJvbHNbJ2VtYWlsJ10uZW5hYmxlKCk7XHJcbiAgICB0aGlzLnVzZXJGb3JtLmNvbnRyb2xzWyd1c2VybmFtZSddLmVuYWJsZSgpO1xyXG4gICAgdGhpcy51c2VyaWQgPSAnJztcclxuICAgIHRoaXMucG9saWN5R3JvdXBMaXN0Lm1hcCgocCkgPT4gcC5kaXNhYmxlZCA9IGZhbHNlKTtcclxuICAgIHRoaXMudXNlclBvbGljeUdyb3VwcyA9IFtdO1xyXG4gICAgdGhpcy5yb2xlUG9saWN5R3JvdXBzID0gW107XHJcbiAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB7fTtcclxuICAgIHRoaXMucG9saWN5R3JvdXBzTGVuZ3RoID0gMDtcclxuICB9XHJcblxyXG4gIGFjdGl2YXRlVXNlcigpIHtcclxuICAgIGNvbnN0IHVzZXJEYXRhID0gdGhpcy51c2VyRm9ybS5nZXRSYXdWYWx1ZSgpO1xyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgZW1haWw6IHVzZXJEYXRhLmVtYWlsLFxyXG4gICAgICBjb2RlOiB1c2VyRGF0YS5vdHBcclxuICAgIH07XHJcbiAgICB0aGlzLnVzZXJTZXJ2aWNlLmFjdGl2YXRlVXNlcihib2R5KS5zdWJzY3JpYmUoXHJcbiAgICAgIChfcmVzOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKCdVc2VyIEFjdGl2YXRlZCBTdWNjZXNzZnVsbHknKTtcclxuICAgICAgfSxcclxuICAgICAgKF9lcnI6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKCdVc2VyIEFjdGl2YXRpb24gRmFpbGVkJyk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RQcm92aWRlcihzZWxlY3RlZDogYW55KSB7XHJcbiAgICB0aGlzLnByb3ZpZGVyQWNjb3VudCA9IHNlbGVjdGVkO1xyXG4gIH1cclxuXHJcbiAgYWRkUHJvdmlkZXJVc2VyKHByb3ZpZGVySWQ6IGFueSwgdXNlcmlkOiBhbnkpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIHByb3ZpZGVySWQ6IHByb3ZpZGVySWQsXHJcbiAgICAgIGFjY291bnRJZDogdXNlcmlkLnRvU3RyaW5nKClcclxuICAgIH07XHJcbiAgICB0aGlzLnVzZXJTZXJ2aWNlLmFkZFByb3ZpZGVyVXNlcihkYXRhKS5zdWJzY3JpYmUoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnUHJvdmlkZXIgVXNlciBhZGRlZCBTdWNjZXNzZnVsbHknKTtcclxuICAgICAgfSxcclxuICAgICAgKF9lcnI6IGFueSkgPT4gY29uc29sZS5sb2coJ2ZhaWxlZCB0byBhZGQgUHJvdmlkZXIgdXNlcicpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmlsZUlucHV0KGZpbGVWYWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBmaWxlVmFsdWUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCBmaWxlOiBGaWxlID0gdGFyZ2V0LmZpbGVzIVswXTtcclxuICAgIHRoaXMudXBsb2FkZWRGaWxlID0gZmlsZVZhbHVlLnRhcmdldC5maWxlc1swXS5uYW1lO1xyXG4gICAgdGhpcy5pbWFnZURhdGEgPSB7XHJcbiAgICAgIGNvbnRlbnRUeXBlOiBmaWxlVmFsdWUudGFyZ2V0LmZpbGVzWzBdLnR5cGUsXHJcbiAgICAgIGZpbGVOYW1lOiBgdXNlci1wcm9maWxlaW1hZ2UvJHt0aGlzLnVzZXJpZH0vJHt0aGlzLnVwbG9hZGVkRmlsZS5yZXBsYWNlQWxsKCcgJywgJycpfWBcclxuICAgIH07XHJcbiAgICB0aGlzLmltYWdlSW5mb3JtYXRpb24gPSAnJztcclxuICAgIGlmICh0aGlzLnZhbGlkYXRlSW1hZ2UoZmlsZVZhbHVlLnRhcmdldC5maWxlcykpIHtcclxuICAgICAgdGhpcy51c2VyU2VydmljZS51cGxvYWRLZXkodGhpcy5pbWFnZURhdGEpLnN1YnNjcmliZShcclxuICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMudXJsUGF0aCA9IHJlcy5kYXRhO1xyXG4gICAgICAgICAgY29uc3QgdXBsb2FkQXR0YWNobWVudDogYW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUnKTtcclxuICAgICAgICAgIGNvbnN0IHVwbG9hZEF0dGFjaG1lbnREZXRhaWxzID0gdXBsb2FkQXR0YWNobWVudC5maWxlc1swXTtcclxuICAgICAgICAgIHRoaXMuaHR0cFNlcnZpY2UucHV0VXBsb2FkKHRoaXMudXJsUGF0aCwgdXBsb2FkQXR0YWNobWVudERldGFpbHMsIHVwbG9hZEF0dGFjaG1lbnREZXRhaWxzLnR5cGUpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgKF9yZXNwOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKCdQcm9maWxlIEltYWdlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlckZvcm0ucGF0Y2hWYWx1ZSh7IHRodW1ibmFpbDogcmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICB0aGlzLmF0dGFjaFR5cGUgPSBmaWxlVmFsdWUudGFyZ2V0LmZpbGVzWzBdLnR5cGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5lcnJvcihBcHBDb25zdGFudHMuZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZWRGaWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVybFBhdGggPSAnJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoX2Vycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKEFwcENvbnN0YW50cy5lcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2xpY2tSZW1vdmVQcm9maWxlKCkge1xyXG4gICAgJCgnI0RlbGV0ZVByb2ZpbGUnKS5tb2RhbCgnc2hvdycpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuICByZW1vdmVUaHVtYm5haWwoKSB7XHJcbiAgICB0aGlzLmNhbmNlbCh0cnVlKTtcclxuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1Byb2ZpbGUgaW1hZ2UgZGVsZXRlZCBzdWNjZXNzZnVsbHkuJyk7XHJcbiAgICAkKCcjRGVsZXRlUHJvZmlsZScpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICB0aGlzLnVzZXJGb3JtLmNvbnRyb2xzWyd0aHVtYm5haWwnXS5yZXNldCgpO1xyXG4gICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJyc7XHJcbiAgICB0aGlzLmltYWdlRGF0YSA9ICcnO1xyXG4gICAgdGhpcy51cGxvYWRlZEZpbGUgPSAnJztcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlSW1hZ2UoZmlsZTogYW55KSB7XHJcbiAgICBjb25zdCBmaWxlU2l6ZSA9IE51bWJlcihmaWxlWzBdLnNpemUpIC8gMTAyNDtcclxuICAgIGNvbnN0IGZpbGV0eXBlID0gZmlsZVswXS50eXBlLnJlcGxhY2UoJ2ltYWdlLycsICcnKTtcclxuICAgIGlmIChmaWxldHlwZSA9PT0gJ2pwZycgfHwgZmlsZXR5cGUgPT09ICdqcGVnJyB8fCBmaWxldHlwZSA9PT0gJ3BuZycgfHwgZmlsZXR5cGUgPT09ICdnaWYnKSB7XHJcbiAgICAgIGlmIChmaWxlU2l6ZSA8IDEwMCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW1hZ2VJbmZvcm1hdGlvbiA9ICdJbWFnZSBzaXplIGV4Y2VlZHMgMTAwIEtCJztcclxuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS53YXJuKCdGaWxlIGlzIGJpZ2dlciB0aGFuIDEwMCBLQicpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJyc7XHJcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLndhcm4oYCR7ZmlsZXR5cGV9IGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkYCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgc3RvcFByb3BhZ2F0aW9uKGV2ZW50OiBFdmVudCkge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RQb2xpY3lHcm91cCgpIHtcclxuICAgIHRoaXMucG9saWN5R3JvdXBzTGVuZ3RoID0gdGhpcy51c2VyRm9ybS52YWx1ZS51c2VycG9saWN5Z3JvdXBzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIG9uUGFnZU5hbWVJbnB1dChldmVudDogS2V5Ym9hcmRFdmVudCwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IGlucHV0LnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBpbnB1dC5zZWxlY3Rpb25FbmQ7XHJcbiAgICBjb25zdCBwYWdlbmFtZUNvbnRyb2wgPSB0aGlzLnVzZXJGb3JtLmdldChuYW1lKTtcclxuICAgIGlmIChwYWdlbmFtZUNvbnRyb2wudmFsdWUpIHtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHBhZ2VuYW1lQ29udHJvbC52YWx1ZVxyXG4gICAgICAgICAgICAuc3BsaXQoJyAnKVxyXG4gICAgICAgICAgICAubWFwKHdvcmQgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkpXHJcbiAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgcGFnZW5hbWVDb250cm9sLnBhdGNoVmFsdWUobmV3VmFsdWUsIHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcclxuICAgICAgICAvLyBSZXN0b3JlIGN1cnNvciBwb3NpdGlvblxyXG4gICAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiPGFwcC1hbGVydD48L2FwcC1hbGVydD5cclxuPGRpdiBjbGFzcz1cInBlcm1pc3Npb25cIj5cclxuICA8ZGl2IGNsYXNzPVwicm93XCIgW2Zvcm1Hcm91cF09XCJ1c2VyRm9ybVwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC1sZy00IGNvbC1tZC02IGNvbC0xMlwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50IHB5LTIgcHgtMCBweC1zbS0wXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lIGZhZGUgc2hvdyBhY3RpdmVcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGJnaWNvbnNlYXJjaCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicC1pbnB1dC1pY29uLXJpZ2h0IHctMTAwXCI+XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJwaSBwaS10aW1lcy1jaXJjbGVcIiAoY2xpY2spPVwiY2xlYXJTZWFyY2goJGV2ZW50KVwiPjwvaT5cclxuICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1VTUl9TRUFSQ0hfQllfTkFNRVwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIGJ5IFVzZXIgbmFtZVwiXHJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIChrZXl1cCk9XCJzZWFyY2hVc2VyKCRldmVudClcIiBwSW5wdXRUZXh0IC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuY29tbW9uIG1sLTJcIiAoY2xpY2spPVwib25DbGlja0FkZFVzZXIoKVwiPkFkZDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8IS0tIE1vZGlmaWVkIGxpbmUgLS0+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJhY2Vzc1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGgtMTAwIHctMTAwIG5nLXN0YXItaW5zZXJ0ZWRcIlxyXG4gICAgICAgICAgICAgICpuZ0lmPVwiIWZpbHRlcmVkVXNlckxpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgPHA+Tm8gUmVjb3JkIEZvdW5kPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiBmaWx0ZXJlZFVzZXJMaXN0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyB1c2VyZGF0YSBhbGlnbi1pdGVtcy1jZW50ZXJcIiAoY2xpY2spPVwiZ2V0VXNlckluZm8oaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwieyBhY3RpdmU6IGl0ZW0uaWQgPT09IHVzZXJpZCB9XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxpbWcgKm5nSWY9XCIhaXRlbT8uYWRkaXRpb25hbGluZm8/LnRodW1ibmFpbD8udXJsXCIgc3JjPVwiYXNzZXRzL2ltYWdlcy91c2VyLWVtcHR5LnBuZ1wiIGFsdD1cInVzZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidXNlcmVtcHR5IG1yLTJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICA8aW1nICpuZ0lmPVwiaXRlbT8uYWRkaXRpb25hbGluZm8/LnRodW1ibmFpbD8udXJsXCIgW3NyY109XCJpdGVtPy5hZGRpdGlvbmFsaW5mbz8udGh1bWJuYWlsPy51cmxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cInVzZXJcIiBjbGFzcz1cInVzZXJlbXB0eSBtci0yXCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvd190eHQgdXNlckluZm9yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibmFtZXVzZXJcIj57eyBpdGVtLmZpcnN0bmFtZSArICcgJyArIGl0ZW0ubGFzdG5hbWUgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbWFpbHVzZXJcIj57eyBpdGVtLmVtYWlsIH19PC9zcGFuPiA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9jay1pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyaWdodC1pY29uc1wiICpuZ0lmPVwiaXRlbT8uaXNsb2NrZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLWxvY2sgbXItMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIChjbGljayk9XCJzdG9wUHJvcGFnYXRpb24oJGV2ZW50KVwiPjwvZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmlnaHQtaWNvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImZhIGZhLXRyYXNoXCIgKGNsaWNrKT1cImRlbGV0ZSgkZXZlbnQsIGl0ZW0uaWQpXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgKnNob3dGaWVsZD1cIidTRVRUSU5HU19VU1JfREVMRVRFX1VTRVInXCI+PC9lbT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcblxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC1sZy04IGNvbC1tZC02IGNvbC0xMiB1c2VyLXJpZ2h0IHNldHRpbmctdGFiIG10LTJcIj5cclxuICAgICAgPHAtY2FyZCBjbGFzcz1cInJiYWMtY2FyZCBoLTEwMFwiIFtzdHlsZV09XCJ7IHdpZHRoOiAnMTAwJScgfVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdHJpcF9oZWFkIHRvZ2dsZWxlZnRcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVwb3J0X2hlYWQgZm9udC13ZWlnaHQtYm9sZFwiPlBlcnNvbmFsIERldGFpbHM8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInAtZmx1aWQgcC1mb3JtZ3JpZCByb3dcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTJcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImZuYW1lXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPkZpcnN0IE5hbWVcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJmbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbnRlciBGaXJzdCBOYW1lXCIgZm9ybUNvbnRyb2xOYW1lPVwiZmlyc3RuYW1lXCJcclxuICAgICAgICAgICAgICBmaWVsZEtleT1cIlNFVFRJTkdTX1VTUl9GSVJTVF9OQU1FXCIgYXJpYS1kZXNjcmliZWRieT1cImZuYW1lXCIgcElucHV0VGV4dFxyXG4gICAgICAgICAgICAgIChrZXl1cCk9XCJvblBhZ2VOYW1lSW5wdXQoJGV2ZW50LCAnZmlyc3RuYW1lJylcIlxyXG4gICAgICAgICAgICAgIChpbnB1dCk9XCJvbklucHV0KCRldmVudCwgJ3VzZXJuYW1lJywgJ0ZpcnN0IE5hbWUnLCB0cnVlKVwiLz5cclxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwidmFsaWRhdGlvbkVycm9yc1snRmlyc3QgTmFtZSddXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj57e3ZhbGlkYXRpb25FcnJvcnNbJ0ZpcnN0IE5hbWUnXX19PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCIhdmFsaWRhdGlvbkVycm9yc1snRmlyc3QgTmFtZSddICYmIGZvcm1WYWxpZGF0ZVsnZmlyc3RuYW1lJ10uZXJyb3JzICYmIGZvcm1TdWJtaXRcIj5cclxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiZm9ybVZhbGlkYXRlWydmaXJzdG5hbWUnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj5GaXJzdCBOYW1lIGlzIHJlcXVpcmVkIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgY29sLWxnLTQgY29sLXNtLTQgY29sLW1kLTEyIGNvbC0xMlwiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwibW5hbWVcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+TWlkZGxlIE5hbWUgPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGlkPVwibW5hbWVcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgTWlkZGxlIE5hbWVcIiBmb3JtQ29udHJvbE5hbWU9XCJtaWRkbGVuYW1lXCJcclxuICAgICAgICAgICAgICBmaWVsZEtleT1cIlNFVFRJTkdTX1VTUl9NSURETEVfTkFNRVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJtbmFtZVwiIHBJbnB1dFRleHRcclxuICAgICAgICAgICAgICAoa2V5dXApPVwib25QYWdlTmFtZUlucHV0KCRldmVudCwgJ21pZGRsZW5hbWUnKVwiIChpbnB1dCk9XCJvbklucHV0KCRldmVudCwgJ3VzZXJuYW1lJywgJ01pZGRsZSBOYW1lJywgZmFsc2UpXCIgLz5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cInZhbGlkYXRpb25FcnJvcnNbJ01pZGRsZSBOYW1lJ11cIiBjbGFzcz1cInAtZXJyb3IgYmxvY2sgbXQtMVwiPnt7dmFsaWRhdGlvbkVycm9yc1snTWlkZGxlIE5hbWUnXX19XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtc20tNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJsTmFtZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5MYXN0IE5hbWVcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJsTmFtZVwiIHR5cGU9XCJ0ZXh0XCIgZm9ybUNvbnRyb2xOYW1lPVwibGFzdG5hbWVcIiBwbGFjZWhvbGRlcj1cIkVudGVyIExhc3QgTmFtZVwiXHJcbiAgICAgICAgICAgICAgZmllbGRLZXk9XCJTRVRUSU5HU19VU1JfTEFTVF9OQU1FXCIgcElucHV0VGV4dFxyXG4gICAgICAgICAgICAgIChrZXl1cCk9XCJvblBhZ2VOYW1lSW5wdXQoJGV2ZW50LCAnbGFzdG5hbWUnKVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJsTmFtZVwiXHJcbiAgICAgICAgICAgICAgKGlucHV0KT1cIm9uSW5wdXQoJGV2ZW50LCAndXNlcm5hbWUnLCAnTGFzdCBOYW1lJywgdHJ1ZSlcIi8+XHJcbiAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cInZhbGlkYXRpb25FcnJvcnNbJ0xhc3QgTmFtZSddXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj57e3ZhbGlkYXRpb25FcnJvcnNbJ0xhc3QgTmFtZSddfX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiF2YWxpZGF0aW9uRXJyb3JzWydMYXN0IE5hbWUnXSAmJiBmb3JtVmFsaWRhdGVbJ2xhc3RuYW1lJ10uZXJyb3JzICYmIGZvcm1TdWJtaXRcIj5cclxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiZm9ybVZhbGlkYXRlWydsYXN0bmFtZSddLmludmFsaWRcIiBjbGFzcz1cInAtZXJyb3IgYmxvY2sgbXQtMVwiPkxhc3QgTmFtZSBpcyByZXF1aXJlZCA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicC1mbHVpZCBwLWZvcm1ncmlkIHJvd1wiPlxyXG4gICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtc20tNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJ1c2VyTmFtZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5Vc2VyIE5hbWVcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJ1c2VyTmFtZVwiIHR5cGU9XCJ0ZXh0XCIgZm9ybUNvbnRyb2xOYW1lPVwidXNlcm5hbWVcIiBwbGFjZWhvbGRlcj1cIkVudGVyIFVzZXIgTmFtZVwiXHJcbiAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cInVzZXJOYW1lXCIgZmllbGRLZXk9XCJTRVRUSU5HU19VU1JfVVNFUk5BTUVcIiBwSW5wdXRUZXh0IC8+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ3VzZXJuYW1lJ10uZXJyb3JzICYmIGZvcm1TdWJtaXRcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ3VzZXJuYW1lJ10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPlVzZXIgTmFtZSBpcyByZXF1aXJlZCA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PiAtLT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTJcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cInVzZXJzRW1haWxpZFwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5FbWFpbFxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cInVzZXJzRW1haWxpZFwiIGZpZWxkS2V5PVwiU0VUVElOR1NfVVNSX0VNQUlMXCIgZm9ybUNvbnRyb2xOYW1lPVwiZW1haWxcIiBwbGFjZWhvbGRlcj1cIkVudGVyIEVtYWlsXCJcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgKGlucHV0KT1cIm9uSW5wdXQoJGV2ZW50LCAnZW1haWwnLCAnRW1haWwnLCB0cnVlKVwiIHBJbnB1dFRleHQgLz5cclxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwidmFsaWRhdGlvbkVycm9yc1snRW1haWwnXVwiIGNsYXNzPVwicC1lcnJvciBibG9jayBtdC0xXCI+e3t2YWxpZGF0aW9uRXJyb3JzWydFbWFpbCddfX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiF2YWxpZGF0aW9uRXJyb3JzWydFbWFpbCddICYmIGZvcm1WYWxpZGF0ZVsnZW1haWwnXS5lcnJvcnMgJiYgZm9ybVN1Ym1pdFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ2VtYWlsJ10uZXJyb3JzWydyZXF1aXJlZCddXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrIG10LTFcIj5FbWFpbCBpcyByZXF1aXJlZCA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwhLS0gPGRpdiAqbmdJZj1cImZvcm1WYWxpZGF0ZVsnZW1haWwnXS5lcnJvcnMgJiYgZm9ybVN1Ym1pdFwiPlxyXG4gICAgICAgICAgICAgIDxzbWFsbCAqbmdJZj1cImZvcm1WYWxpZGF0ZVsnZW1haWwnXS5lcnJvcnNbJ3BhdHRlcm4nXVwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPlZhbGlkIGVtYWlsIGlzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+IC0tPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtc20tNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBhcmlhLWxhYmVsbGVkYnk9XCJyb2xlXCIgZm9yPVwicm9sZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5Sb2xlXHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXF1aXJlZGZpZWxkIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPHAtZHJvcGRvd24gaW5wdXRJZD1cInJvbGVcIiBbb3B0aW9uc109XCJ1c2VyUm9sZXNcIiBwbGFjZWhvbGRlcj1cIlNlbGVjdCBhIFJvbGVcIiBmb3JtQ29udHJvbE5hbWU9XCJ1c2Vycm9sZXNcIlxyXG4gICAgICAgICAgICAgIHN0eWxlQ2xhc3M9XCJ3LTEwMFwiIG9wdGlvbkxhYmVsPVwibmFtZVwiIFtyZXNldEZpbHRlck9uSGlkZV09XCJ0cnVlXCIgW2ZpbHRlcl09XCJ0cnVlXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCJcclxuICAgICAgICAgICAgICBvcHRpb25WYWx1ZT1cImlkXCIgYXJpYUZpbHRlckxhYmVsPVwibnVsbFwiIGZpZWxkS2V5PVwiU0VUVElOR1NfVVNSX1JPTEVcIlxyXG4gICAgICAgICAgICAgIChvbkNoYW5nZSk9XCJnZXRSb2xlUG9saWN5R3JvdXBzKCRldmVudC52YWx1ZSlcIj5cclxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW0gcFRlbXBsYXRlPVwic2VsZWN0ZWRJdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHBUb29sdGlwPVwie3tpdGVtPy5uYW1lfX1cIiB0b29sdGlwUG9zaXRpb249XCJ0b3BcIiBjbGFzcz1cInRleHQtdHJ1bmNhdGVcIj4ge3sgaXRlbT8ubmFtZSB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC1vYmplY3QgcFRlbXBsYXRlPVwiaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAge3sgb2JqZWN0Lm5hbWUgfX1cclxuICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICAgICAgICA8L3AtZHJvcGRvd24+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJmb3JtVmFsaWRhdGVbJ3VzZXJyb2xlcyddLmVycm9ycyAmJiBmb3JtU3VibWl0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cImZvcm1WYWxpZGF0ZVsndXNlcnJvbGVzJ10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9jayBtdC0xXCI+Um9sZSBpcyByZXF1aXJlZCA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1tZC0xMiBjb2wtMTJcIj5cclxuICAgICAgICAgICAgPHAtYWNjb3JkaW9uIGNsYXNzPVwidy1mdWxsIHBvbGljeWdyb3VwLWFjY29yZGlvblwiIGljb25Qb3M9XCJlbmRWYWxcIj5cclxuICAgICAgICAgICAgICA8cC1hY2NvcmRpb25UYWI+XHJcbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgaGVhZC10ZXh0IGdhcC0yIHctZnVsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9udC1ib2xkXCI+PGxhYmVsIGZvcj1cInBHcm91cFwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHMgbWItMFwiPkFkZGl0aW9uYWwgUG9saWN5IEdyb3VwczwvbGFiZWw+IDxzcGFuICpuZ0lmPVwicG9saWN5R3JvdXBzTGVuZ3RoID4gMFwiIGNsYXNzPVwicGctY291bnQgbWwtMlwiPnt7cG9saWN5R3JvdXBzTGVuZ3RofX08L3NwYW4+IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDxwLW11bHRpU2VsZWN0IFtvcHRpb25zXT1cInBvbGljeUdyb3VwTGlzdFwiIGZvcm1Db250cm9sTmFtZT1cInVzZXJwb2xpY3lncm91cHNcIiBbcmVzZXRGaWx0ZXJPbkhpZGVdPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbD1cIlNlbGVjdCBQb2xpY3kgR3JvdXBzXCIgb3B0aW9uTGFiZWw9XCJwb2xpY3lncm91cG5hbWVcIiBpbnB1dElkPVwicEdyb3VwXCJcclxuICAgICAgICAgICAgICAgICAgYXJpYUZpbHRlckxhYmVsPVwibnVsbFwiIGZpZWxkS2V5PVwiU0VUVElOR1NfVVNSX1BPTElDWV9HUk9VUFwiIChvbkNoYW5nZSk9XCJzZWxlY3RQb2xpY3lHcm91cCgpXCIgZGlzcGxheT1cImNoaXBcIiBzdHlsZUNsYXNzPVwicG9saWN5Z3JvdXAtdjJcIj5cclxuICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC12YWx1ZSBwVGVtcGxhdGU9XCJzZWxlY3RlZEl0ZW1zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIHZhbHVlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ICNzZWxlY3RlZHBnIGNsYXNzPVwicC1tdWx0aXNlbGVjdC10b2tlblwiIFtuZ0NsYXNzXT1cIm9wdGlvbi5kaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiAnJyBcIiBpZD1cInt7b3B0aW9uLmlkfX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBvbGljeWdyb3VwbmFtZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgb3B0aW9uLnBvbGljeWdyb3VwbmFtZSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJvbGVwZyBtbC0yIGJhZGdlIGJhZGdlLXByaW1hcnlcIiAqbmdJZj1cIm9wdGlvbi5kaXNhYmxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUm9sZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJwaSBwaS10aW1lcy1jaXJjbGUgbWwtMiBjbGVhci1pY29uIHJpZ2h0LXNlY1wiICpuZ0lmPVwiIW9wdGlvbi5kaXNhYmxlZFwiIHJvbGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cInJlbW92ZVZhbHVlKCRldmVudCwgc2VsZWN0ZWRwZylcIj48L2VtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCIhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwXCI+U2VsZWN0IFBvbGljeSBHcm91cHNcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC1wZyBwVGVtcGxhdGU9XCJpdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgZmxleC1yb3cganVzdGlmeS1jb250ZW50LWJldHdlZW4gZ2FwLTIgZGlzYWJsZWQtbGlzdCB3LTEwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdj57eyBwZy5uYW1lIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJvbGVwZyBtbC0yIGJhZGdlIGJhZGdlLXByaW1hcnlcIiAqbmdJZj1cInBnLmRpc2FibGVkXCI+Um9sZTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDwvcC1tdWx0aVNlbGVjdD5cclxuICAgICAgICAgICAgICA8L3AtYWNjb3JkaW9uVGFiPlxyXG4gICAgICAgICAgICA8L3AtYWNjb3JkaW9uPlxyXG5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwLWZsdWlkIHAtZm9ybWdyaWQgcm93XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbWQtMTIgY29sLTEyIG1iLTEgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiICpuZ0lmPVwiIXNlbmRDcmVkZW50aWFsc1wiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiZmlsZVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG10LTIgbWItMiBwcm9maWxlIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLWljb24gbWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCBhY3Rpb24tYnRuIHVwbG9hZCBtci0yXCI+Y2xvdWRfdXBsb2FkPC9zcGFuPkFkZFxyXG4gICAgICAgICAgICAgIEltYWdlPC9sYWJlbD5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1pY29uIG1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgdGV4dC1tdXRlZCBhY3Rpb24tYnRuIG14LTJcIlxyXG4gICAgICAgICAgICAgIHBUb29sdGlwPVwiU3VwcG9ydGVkIGZpbGUgZm9ybWF0cyBhcmUgSlBHLCBQTkcsIEpQRUcgYW5kIEdJRlwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPlxyXG4gICAgICAgICAgICAgIEluZm9cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiAoY2hhbmdlKT1cImhhbmRsZUZpbGVJbnB1dCgkZXZlbnQpXCIgaWQ9XCJmaWxlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCJcclxuICAgICAgICAgICAgICBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjsgZGlzcGxheTogbm9uZVwiIC8+XHJcbiAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJ1c2VyRm9ybS5jb250cm9sc1sndGh1bWJuYWlsJ10udmFsdWVcIiBbc3JjXT1cInVzZXJGb3JtLmNvbnRyb2xzWyd0aHVtYm5haWwnXS52YWx1ZVwiIGFsdD1cInVzZXJcIlxyXG4gICAgICAgICAgICAgIGNsYXNzPVwidXNlcmVtcHR5IG1yLTBcIiAvPlxyXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ3YXJuaW5nIG1sLTIgbWItbWQtMFwiXHJcbiAgICAgICAgICAgICAgW25nU3R5bGVdPVwieyBjb2xvcjogaW1hZ2VJbmZvcm1hdGlvbiA9PT0gJ0ltYWdlIHNpemUgZXhjZWVkcyAxMDAgS0InID8gJyNmYzAzMDMnIDogJyMwMDdjYzMnfVwiPnt7XHJcbiAgICAgICAgICAgICAgaW1hZ2VJbmZvcm1hdGlvbiB9fTwvbGFiZWw+IDxlbSBjbGFzcz1cInBpIHBpLXRyYXNoIG1sLTJcIiBwVG9vbHRpcD1cIlJlbW92ZSBJbWFnZVwiXHJcbiAgICAgICAgICAgICAgKm5nSWY9XCJ1c2VyRm9ybS5jb250cm9sc1sndGh1bWJuYWlsJ10udmFsdWUgJiYgaW1hZ2VJbmZvcm1hdGlvbiAhPT0gJ0ltYWdlIHNpemUgZXhjZWVkcyAxMDAgS0InXCJcclxuICAgICAgICAgICAgICAoY2xpY2spPVwib25DbGlja1JlbW92ZVByb2ZpbGUoKVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPjwvZW0+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJwLWZsdWlkIHAtZm9ybWdyaWQgcm93XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBjb2wtbGctNCBjb2wtc20tNCBjb2wtbWQtMTIgY29sLTEyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkLWNoZWNrYm94IHNlbmQtY3JlZGVudGlhbHNcIiAqbmdJZj1cInNlbmRDcmVkZW50aWFsc1wiPlxyXG4gICAgICAgICAgICAgIDxwLWNoZWNrYm94IGNsYXNzPVwicC1tLTEgcC1tLWxnLTJcIiBpbnB1dElkPVwiYmluYXJ5XCIgW2JpbmFyeV09XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgIGZpZWxkS2V5PVwiU0VUVElOR1NfVVNSX0VNQUlMX1RPX0NVUlJFTlRfVVNFUlwiIGZvcm1Db250cm9sTmFtZT1cImVtYWlsdG9jdXJyZW50dXNlclwiPlxyXG4gICAgICAgICAgICAgIDwvcC1jaGVja2JveD5cclxuICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYmluYXJ5XCI+U2VuZCBDcmVkZW50aWFscyB0byBDdXJyZW50IExvZ2dlZCBpbiBVc2VyPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInAtZmx1aWQgcC1mb3JtZ3JpZCByb3dcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQtY2hlY2tib3ggc2VuZC1jcmVkZW50aWFsc1wiICpuZ0lmPVwiIXNlbmRDcmVkZW50aWFsc1wiPlxyXG4gICAgICAgICAgICAgIDxwLWNoZWNrYm94IGNsYXNzPVwicC1tLTEgcC1tLWxnLTJcIiBpbnB1dElkPVwiaXNlbmFibGVkXCIgW2JpbmFyeV09XCJ0cnVlXCIgZm9ybUNvbnRyb2xOYW1lPVwiaXNlbmFibGVkXCI+XHJcbiAgICAgICAgICAgICAgPC9wLWNoZWNrYm94PlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpc2VuYWJsZWRcIj5BY3RpdmU8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgY29sLWxnLTQgY29sLXNtLTQgY29sLW1kLTEyIGNvbC0xMlwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZC1jaGVja2JveCBzZW5kLWNyZWRlbnRpYWxzXCIgKm5nSWY9XCIhc2VuZENyZWRlbnRpYWxzXCI+XHJcbiAgICAgICAgICAgICAgPHAtY2hlY2tib3ggY2xhc3M9XCJwLW0tMSBwLW0tbGctMlwiIGlucHV0SWQ9XCJpc2xvY2tlZFwiIFtiaW5hcnldPVwidHJ1ZVwiIGZvcm1Db250cm9sTmFtZT1cImlzbG9ja2VkXCI+XHJcbiAgICAgICAgICAgICAgPC9wLWNoZWNrYm94PlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpc2xvY2tlZFwiPkxvY2tlZDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInAtZmx1aWQgcC1mb3JtZ3JpZCByb3dcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTJcIj48L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTJcIj48L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLWZpZWxkIGNvbC1sZy00IGNvbC1zbS00IGNvbC1tZC0xMiBjb2wtMTIgbWItMFwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGZpZWxkS2V5PVwiU0VUVElOR1NfVVNSX0FERF9VUERBVEVcIiBjbGFzcz1cInB1bGwtcmlnaHQgbXItMiBtYi0yIGJ0biBidG4tcHJpbWFyeSBidG5jb21tb25cIlxyXG4gICAgICAgICAgICAgIChjbGljayk9XCJhZGRVc2VyKClcIj5cclxuICAgICAgICAgICAgICB7eyB1c2VyaWQgPyAnVXBkYXRlIFVzZXInIDogJ0FkZCBVc2VyJyB9fVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBmaWVsZEtleT1cIlNFVFRJTkdTX1VTUl9DQU5DRUxcIiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCJcclxuICAgICAgICAgICAgICAoY2xpY2spPVwiY2FuY2VsVXNlcigpXCI+XHJcbiAgICAgICAgICAgICAgQ2xlYXJcclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9wLWNhcmQ+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJtb2RhbFwiIGlkPVwiRGVsZXRldXNlclwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCI+XHJcbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RGVsZXRlIFVzZXI8L2g1PlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgQXJlIHlvdSBzdXJlIHdhbnQgdG8gRGVsZXRlIFVzZXI/XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTJcIj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbW1vbiBkZWxldGVcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIChjbGljayk9XCJkZWxldGVVc2VyKClcIj5cclxuICAgICAgICAgICAgRGVsZXRlXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgbXItMiBidG4gYmctd2hpdGUgdGV4dC1wcmltYXJ5IGJ0bmNhbmNlbFwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCI+Q2FuY2VsPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwibW9kYWxcIiBpZD1cIkRlbGV0ZVByb2ZpbGVcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiPlxyXG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2dcIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cclxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkRlbGV0ZSBQcm9maWxlIEltYWdlPC9oNT5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cclxuICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIFByb2ZpbGUgSW1hZ2U/XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTJcIj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbW1vbiBkZWxldGVcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiXHJcbiAgICAgICAgICAgIChjbGljayk9XCJyZW1vdmVUaHVtYm5haWwoKVwiPlxyXG4gICAgICAgICAgICBEZWxldGVcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5DYW5jZWw8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+Il19